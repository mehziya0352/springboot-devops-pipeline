name: Minimal Secure DevOps Pipeline (JAR Deployment)

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_DIR: terraform
  ANSIBLE_DIR: ansible

jobs:
  build-jar:
    name: Build Spring Petclinic JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Clone Spring Petclinic and build
        run: |
          git clone https://github.com/spring-projects/spring-petclinic.git
          cd spring-petclinic
          ./mvnw -B -DskipTests package
          mkdir -p ../ansible/roles/spring-petclinic/files
          cp target/*.jar ../ansible/roles/spring-petclinic/files/spring-petclinic.jar
          ls -l ../ansible/roles/spring-petclinic/files/

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: petclinic-jar
          path: ansible/roles/spring-petclinic/files/spring-petclinic.jar

  infra:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build-jar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: petclinic-jar
          path: ansible/roles/spring-petclinic/files/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.6"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Backend
        run: |
          chmod +x ./create-backend.sh
          ./create-backend.sh

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init \
          -backend-config="bucket=${{ secrets.S3_BUCKET }}" \
          -backend-config="key=secure-devops-pipeline-minimal/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -lock=false -var="key_name=${{ secrets.AWS_KEY_NAME }}"

      - name: Save Terraform output
        working-directory: ./terraform
        run: terraform output -json > tfoutput.json

      - name: Upload Terraform output
        uses: actions/upload-artifact@v4
        with:
          name: tfoutput
          path: terraform/tfoutput.json

  deploy:
    name: Deploy Spring Petclinic JAR
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: petclinic-jar
          path: ansible/roles/spring-petclinic/files/

      - name: Download Terraform output
        uses: actions/download-artifact@v4
        with:
          name: tfoutput
          path: terraform/

      - name: Generate Ansible inventory
        run: |
          python3 scripts/tf-to-inventory.py terraform/tfoutput.json > ansible/inventory.ini
          cat ansible/inventory.ini

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Disable host key checking
        run: |
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Wait for EC2 SSH to be ready
        run: sleep 30

      - name: Deploy Petclinic with dynamic MySQL
        working-directory: ./ansible
        run: |
          # Get MySQL public IP from Terraform output
          MYSQL_IP=$(jq -r '.mysql_public_ip.value' terraform/tfoutput.json)
          
          # Run Ansible playbook with variables
          ansible-playbook -i inventory.ini playbook.yml --private-key ~/.ssh/id_rsa \
            -e "mysql_host=$MYSQL_IP mysql_user=petclinic_user mysql_password=Petclinic@123" -vv

      - name: Show EC2 Public IP
        run: |
          IP=$(jq -r '.ec2_public_ip.value' terraform/tfoutput.json)
          echo "Spring Petclinic will be available at: http://$IP:8080"
